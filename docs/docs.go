// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "post": {
                "description": "create a new thing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "New"
                ],
                "summary": "create a new thing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "New thing",
                        "name": "thing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.NewThing"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/main.Thing"
                        }
                    },
                    "400": {
                        "description": "The input object failed validation",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "401": {
                        "description": "Missing or Invalid Authorization Token",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{id}": {
            "get": {
                "description": "Load a thing from the thing API",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get"
                ],
                "summary": "load a thing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Thing ID, see the ID field from a new Thing",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Thing"
                        }
                    },
                    "401": {
                        "description": "Missing or Invalid Authorization Token",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "404": {
                        "description": "This thing does not exist",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a thing from the thing API\nNote: this endpoint will fail if the thing does not exist",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Delete"
                ],
                "summary": "delete a thing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Thing ID, see the ID field from a new Thing",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The thing was successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Missing or Invalid Authorization Token",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "404": {
                        "description": "This thing does not exist",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.Error": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                }
            }
        },
        "main.NewThing": {
            "description": "Request body for a new 'thing` + "`" + `",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "The name of the new thing",
                    "type": "string",
                    "minLength": 5,
                    "example": "my new thing"
                }
            }
        },
        "main.Thing": {
            "description": "An object of the 'Thing' model",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "The time this thing was created at",
                    "type": "string"
                },
                "flooble": {
                    "description": "Flooble holds the obviously important flooble value of this thing,\nwhich is unique to this thing and should be cherished",
                    "type": "integer"
                },
                "id": {
                    "description": "The id of this Thing",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this thing",
                    "type": "string"
                },
                "status": {
                    "description": "The status of this thing, in enum ['creating', 'created', 'error']",
                    "type": "string",
                    "enum": [
                        "creating",
                        "created",
                        "error"
                    ]
                },
                "updated_at": {
                    "description": "The time this thing was updated at",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
