{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/": {
            "get": {
                "description": "Return a list of all DevEx tokens owned by the\ncurrently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "All"
                ],
                "summary": "return a list of a tokens owned by the current user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Token"
                            }
                        }
                    },
                    "401": {
                        "description": "Missing or Invalid Authorization header",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Accept a name and generate a new Thing, assigned\nto the currently authenticated user.\nA successful call to this end point will return status 201.\nYou must make further GETs on the returned resource in order\nto determine whether the resource has been created successfully.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "New"
                ],
                "summary": "create a new token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Body containing the name of the new token to create",
                        "name": "thing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.NewToken"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/main.Token"
                        }
                    },
                    "400": {
                        "description": "The input object failed validation",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "401": {
                        "description": "Missing or Invalid Authorization Header",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{id}": {
            "get": {
                "description": "Load a specific token, by ID, for the currently\nauthenticated user, returning a 404 when no such token\ncan be found",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get"
                ],
                "summary": "load a token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Token"
                        }
                    },
                    "401": {
                        "description": "Missing or Invalid Authorization Header",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "404": {
                        "description": "This Token does not exist",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the specified Token,\nreturning a 404 if the Token ID is unrecognised",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Delete"
                ],
                "summary": "delete a token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The token was successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Missing or Invalid Authorization Header",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "404": {
                        "description": "This token does not exist",
                        "schema": {
                            "$ref": "#/definitions/main.Error"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.Error": {
            "description": "Error is a generic model for surfacing errors to users",
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                }
            }
        },
        "main.NewToken": {
            "description": "Request body for a new Token",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "The name of the new thing",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 5,
                    "example": "my new thing"
                }
            }
        },
        "main.Token": {
            "description": "A user created Token, including the status and name of the Token",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "The time this token was created at",
                    "type": "string"
                },
                "id": {
                    "description": "The id of this Token",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this Token, as specified by the user",
                    "type": "string"
                },
                "status": {
                    "description": "The status of this Token, in enum ['creating', 'created', 'error']",
                    "type": "string",
                    "enum": [
                        "creating",
                        "created",
                        "error"
                    ]
                },
                "updated_at": {
                    "description": "The time this token was updated at",
                    "type": "string"
                },
                "value": {
                    "description": "Value represents the user token associated with this object and\nis used when interacting with other APIs.\n\nThe token Value should be stored securely, given the amount\nof power it has",
                    "type": "integer"
                }
            }
        }
    }
}